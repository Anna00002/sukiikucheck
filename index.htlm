<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Â•Ω„ÅçËÇ≤Ë®∫Êñ≠„Ç∑„Éº„Éà</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Hiragino Sans', 'Hiragino Kaku Gothic ProN', 'Noto Sans JP', sans-serif;
            background: linear-gradient(135deg, #ffe4e6 0%, #fce7f3 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            overflow: hidden;
        }

        .header {
            background: linear-gradient(135deg, #f472b6 0%, #ec4899 100%);
            color: white;
            padding: 30px 20px;
            text-align: center;
            position: relative;
            overflow: hidden;
        }

        .header::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><circle cx="20" cy="20" r="2" fill="rgba(255,255,255,0.1)"/><circle cx="80" cy="30" r="1.5" fill="rgba(255,255,255,0.15)"/><circle cx="40" cy="70" r="1" fill="rgba(255,255,255,0.1)"/><circle cx="90" cy="80" r="2.5" fill="rgba(255,255,255,0.05)"/></svg>') repeat;
            animation: float 20s infinite linear;
        }

        @keyframes float {
            0% { transform: translate(-50%, -50%) rotate(0deg); }
            100% { transform: translate(-50%, -50%) rotate(360deg); }
        }

        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
            position: relative;
            z-index: 1;
        }

        .header p {
            font-size: 1.2em;
            opacity: 0.9;
            position: relative;
            z-index: 1;
        }

        .monster {
            position: absolute;
            top: 20px;
            right: 20px;
            width: 60px;
            height: 60px;
            background: #ff69b4;
            border-radius: 50%;
            z-index: 2;
        }

        .monster::before {
            content: 'üëæ';
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 30px;
        }

        .content {
            padding: 40px 30px;
        }

        .category {
            margin-bottom: 30px;
            background: #fef7ff;
            border-radius: 15px;
            padding: 25px;
            border: 2px solid #f3e8ff;
            transition: all 0.3s ease;
        }

        .category:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(244, 114, 182, 0.1);
        }

        .category-title {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
            font-size: 1.5em;
            font-weight: bold;
            color: #be185d;
        }

        .category-letter {
            width: 50px;
            height: 50px;
            background: linear-gradient(135deg, #f472b6 0%, #ec4899 100%);
            color: white;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5em;
            font-weight: bold;
            margin-right: 15px;
            box-shadow: 0 4px 8px rgba(244, 114, 182, 0.3);
        }

        .question {
            margin-bottom: 20px;
            padding: 20px;
            background: white;
            border-radius: 12px;
            border: 1px solid #fce7f3;
            transition: all 0.3s ease;
        }

        .question:hover {
            border-color: #f472b6;
            box-shadow: 0 2px 8px rgba(244, 114, 182, 0.1);
        }

        .question-text {
            font-size: 1.1em;
            margin-bottom: 15px;
            line-height: 1.6;
            color: #374151;
        }

        .options {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }

        .option {
            flex: 1;
            min-width: 120px;
            padding: 12px 16px;
            border: 2px solid #fce7f3;
            border-radius: 25px;
            background: white;
            cursor: pointer;
            text-align: center;
            font-size: 0.9em;
            transition: all 0.3s ease;
            position: relative;
        }

        .option:hover {
            border-color: #f472b6;
            transform: translateY(-1px);
        }

        .option.selected {
            background: linear-gradient(135deg, #f472b6 0%, #ec4899 100%);
            color: white;
            border-color: #ec4899;
            transform: scale(1.05);
        }

        .score-summary {
            margin-top: 20px;
            padding: 20px;
            background: linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 100%);
            border: 2px solid #0ea5e9;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .score-summary-left {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .score-summary-text {
            font-size: 1.1em;
            font-weight: bold;
            color: #0c4a6e;
        }

        .manual-score-input {
            width: 80px;
            height: 40px;
            border: 2px solid #0ea5e9;
            border-radius: 8px;
            text-align: center;
            font-size: 1.2em;
            font-weight: bold;
            color: #0c4a6e;
            background: white;
            transition: all 0.3s ease;
        }

        .manual-score-input:focus {
            outline: none;
            border-color: #0284c7;
            box-shadow: 0 0 0 3px rgba(14, 165, 233, 0.1);
            transform: scale(1.05);
        }

        .max-score-text {
            font-size: 0.9em;
            color: #64748b;
        }

        .calculate-btn {
            display: block;
            margin: 30px auto;
            padding: 15px 40px;
            background: linear-gradient(135deg, #f472b6 0%, #ec4899 100%);
            color: white;
            border: none;
            border-radius: 25px;
            font-size: 1.2em;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 8px rgba(244, 114, 182, 0.3);
        }

        .calculate-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(244, 114, 182, 0.4);
        }

        .calculate-btn:disabled {
            background: #d1d5db;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        /* Êñ∞„Åó„ÅÑÁµêÊûúË°®Á§∫„Çπ„Çø„Ç§„É´ */
        .results {
            margin-top: 40px;
            padding: 40px 30px;
            background: linear-gradient(135deg, #e91e63, #ad1457);
            border-radius: 15px;
            color: white;
            text-align: center;
            display: none;
        }

        .results h3 {
            font-size: 2.2em;
            margin-bottom: 10px;
            font-weight: bold;
        }

        .results-subtitle {
            font-size: 1.1em;
            opacity: 0.9;
            margin-bottom: 30px;
        }

        .main-result-card {
            background: rgba(255, 255, 255, 0.15);
            border-radius: 20px;
            padding: 30px;
            margin-bottom: 30px;
            backdrop-filter: blur(10px);
            border: 2px solid rgba(255, 255, 255, 0.2);
        }

        .result-icon {
            font-size: 4em;
            margin-bottom: 15px;
        }

        .result-main-title {
            font-size: 1.8em;
            font-weight: bold;
            margin-bottom: 8px;
        }

        .result-subtitle {
            font-size: 1.1em;
            opacity: 0.9;
            margin-bottom: 20px;
        }

        .result-description {
            font-size: 1.05em;
            line-height: 1.6;
            color: rgba(255, 255, 255, 0.95);
        }

        .all-scores {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            padding: 25px;
            margin-top: 20px;
        }

        .all-scores h4 {
            font-size: 1.3em;
            margin-bottom: 20px;
            color: white;
        }

        .score-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 12px 15px;
            margin-bottom: 8px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            transition: all 0.3s ease;
        }

        .score-item:hover {
            background: rgba(255, 255, 255, 0.2);
        }

        .score-item.top-score {
            background: rgba(255, 255, 255, 0.25);
            border: 2px solid rgba(255, 255, 255, 0.4);
            font-weight: bold;
        }

        .score-name {
            font-size: 1em;
        }

        .score-value {
            font-size: 1.2em;
            font-weight: bold;
        }

        .reset-btn {
            display: block;
            margin: 20px auto 0;
            padding: 12px 25px;
            background: rgba(255, 255, 255, 0.2);
            color: white;
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-radius: 20px;
            font-size: 1em;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .reset-btn:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: translateY(-1px);
        }

        .disclaimer {
            margin-top: 30px;
            padding: 20px;
            background: #fef9c3;
            border: 1px solid #fde047;
            border-radius: 10px;
            font-size: 0.9em;
            color: #a16207;
            text-align: center;
        }

        .error-message {
            color: #dc2626;
            font-size: 0.9em;
            margin-top: 20px;
            text-align: center;
            padding: 10px;
            background: #fef2f2;
            border: 1px solid #fecaca;
            border-radius: 8px;
            display: none;
        }

        @media (max-width: 768px) {
            .container {
                margin: 10px;
                border-radius: 15px;
            }
            
            .header {
                padding: 20px 15px;
            }
            
            .header h1 {
                font-size: 2em;
            }
            
            .content {
                padding: 20px 15px;
            }
            
            .options {
                flex-direction: column;
            }
            
            .option {
                min-width: auto;
            }
            
            .score-summary {
                flex-direction: column;
                align-items: flex-start;
                gap: 10px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="monster"></div>
            <h1>Â≠ê„Å©„ÇÇ„ÅÆ„ÄåÂ•Ω„Åç„Äç„Åã„ÇâÂ≠¶„Å≥„ÇíËÇ≤„Å¶„Çã</h1>
            <p>Ë≥™Âïè„Å´Á≠î„Åà„Å¶„ÄÅÂêÑÈ†ÖÁõÆ„ÅÆÂêàË®àÁÇπÊï∞„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ</p>
        </div>

        <div class="content">
            <div id="categories-container">
                <!-- Categories will be generated here -->
            </div>

            <div class="error-message" id="error-message">
                „Åô„Åπ„Å¶„ÅÆÈ†ÖÁõÆ„Å´0„Äú6„ÅÆÊï∞ÂÄ§„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
            </div>

            <button id="calculate-btn" class="calculate-btn" onclick="calculateResults()">
                Ë®∫Êñ≠ÁµêÊûú„ÇíË¶ã„Çã
            </button>

            <div id="results" class="results">
                <h3>Ë®∫Êñ≠ÁµêÊûú</h3>
                <p class="results-subtitle">„ÅÇ„Å™„Åü„ÅÆ„ÅäÂ≠ê„Åï„Çì„ÅØ...</p>
                <div id="main-result" class="main-result-card">
                    <!-- „É°„Ç§„É≥„ÅÆË®∫Êñ≠ÁµêÊûú„Åå„Åì„Åì„Å´Ë°®Á§∫„Åï„Çå„Åæ„Åô -->
                </div>
                <div id="all-scores" class="all-scores">
                    <h4>ÂÖ®È†ÖÁõÆ„ÅÆÂæóÁÇπ</h4>
                    <div id="scores-list">
                        <!-- ÂÖ®„Çπ„Ç≥„Ç¢„Åå„Åì„Åì„Å´Ë°®Á§∫„Åï„Çå„Åæ„Åô -->
                    </div>
                </div>
                <button id="reset-btn" class="reset-btn" onclick="resetQuiz()">„É™„Çª„ÉÉ„Éà„Åó„Å¶ÂÜçÂÖ•Âäõ</button>
            </div>

            <div class="disclaimer">
                ‚Äª „Åì„ÅÆË®∫Êñ≠„ÅØÂåªÂ≠¶ÁöÑË®∫Êñ≠„Åß„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ<br>
                Â•Ω„Åç„ÅÆÂÇæÂêë„ÇíÊï¥ÁêÜ„Åô„Çã„Éï„É¨„Éº„É†„Åß„Åô„ÄÇ
            </div>
        </div>
    </div>

    <script>
        const questions = {
            'A': [
                'Êñ∞„Åó„ÅÑ„ÇÇ„ÅÆ„ÇÑÁü•„Çâ„Å™„ÅÑ„Åì„Å®„ÇíË¶ã„Å§„Åë„Çã„Å®„Äå„Å©„ÅÜ„Åó„Å¶Ôºü„Äç„Å®„Çà„ÅèËÅû„Åè„ÄÇ',
                'Ëô´„ÇÑÊ§çÁâ©„Å™„Å©„ÇíË¶ã„Å§„Åë„Çã„Å®„ÄÅ„Åò„Å£„Åè„ÇäË¶≥ÂØü„Åó„Åü„Åå„Çã„ÄÇ',
                'ËààÂë≥„ÇíÊåÅ„Å£„Åü„Åì„Å®„ÇíÂõ≥Èëë„ÇÑÊú¨„ÅßË™ø„Åπ„Çã„ÅÆ„ÅåÂ•Ω„Åç„ÄÇ'
            ],
            'B': [
                '„Å¨„ÅÑ„Åê„Çã„Åø„ÇÑ„Åä„ÇÇ„Å°„ÇÉ„Åß„Åî„Å£„ÅìÈÅä„Å≥„Çí„Åó„Å¶Áâ©Ë™û„Çí‰Ωú„Çã„ÄÇ',
                'ÁµµÊú¨„ÇíË™≠„Çì„Å†„Çä„ÄÅËá™ÂàÜ„Åß„ÅäË©±„ÇíËÄÉ„Åà„Åü„Çä„Åô„Çã„ÅÆ„ÅåÂ•Ω„Åç„ÄÇ',
                'Ë™≠„Çì„Å†„ÅäË©±„ÅÆÁ∂ö„Åç„ÇíÊÉ≥ÂÉè„Åó„Å¶Ë©±„Åô„Åì„Å®„Åå„ÅÇ„Çã„ÄÇ'
            ],
            'C': [
                'Èùô„Åã„Å´ÈÅä„Å∂„Çà„Çä„ÄÅËµ∞„Å£„Åü„ÇäË∑≥„Çì„Å†„Çä„Åô„Çã„Åª„ÅÜ„ÅåÂ•Ω„Åç„ÄÇ',
                'ÂÖ¨Âúí„ÅÆÈÅäÂÖ∑„ÅßÈÅä„Å∂„ÅÆ„ÅåÂ§ßÂ•Ω„Åç„ÄÇ',
                '„Éú„Éº„É´ÈÅä„Å≥„ÇÑ„Åã„Åë„Å£„Åì„Å´Â§¢‰∏≠„Å´„Å™„Çä„ÇÑ„Åô„ÅÑ„ÄÇ'
            ],
            'D': [
                'Áµµ„ÇíÊèè„ÅÑ„Åü„ÇäËâ≤„Çí„Å¨„Å£„Åü„Çä„Åô„Çã„ÅÆ„ÅåÂ•Ω„Åç„ÄÇ',
                'ÈñìÈÅï„ÅÑÊé¢„Åó„ÇÑËø∑Ë∑Ø„Å™„Å©„ÄÅÁõÆ„ÅßË¶ã„Å¶Êé¢„ÅôÈÅä„Å≥„ÅåÂæóÊÑè„ÄÇ',
                '„Éñ„É≠„ÉÉ„ÇØ„ÇÑÁ©ç„ÅøÊú®„Åß„Ç´„É©„Éï„É´„Å™ÂΩ¢„Çí‰Ωú„Çã„ÅÆ„ÇíÊ•Ω„Åó„ÇÄ„ÄÇ'
            ],
            'E': [
                'Èü≥Ê•Ω„Å´Âêà„Çè„Åõ„Å¶Ê≠å„Å£„Åü„ÇäË∏ä„Å£„Åü„Çä„Åô„Çã„ÅÆ„ÅåÂ§ßÂ•Ω„Åç„ÄÇ',
                'Èü≥„ÅåÊµÅ„Çå„Çã„Å®‰Ωì„Åß„É™„Ç∫„É†„ÇíÂèñ„Å£„Åü„Çä‰∏ÄÁ∑í„Å´Ê≠å„ÅÜ„Åì„Å®„ÅåÂ§ö„ÅÑ„ÄÇ',
                '„Ç≥„ÉÉ„Éó„ÇÑ„ÅäÁöø„Çí„Åü„Åü„ÅÑ„Å¶„É™„Ç∫„É†ÈÅä„Å≥„Çí„Åô„Çã„Åì„Å®„Åå„ÅÇ„Çã„ÄÇ'
            ],
            'F': [
                'ÊôÇË®à„ÅÆÊï∞Â≠ó„ÇÑËªä„ÅÆ„Éä„É≥„Éê„Éº„ÇíË¶ã„Å¶Ë™≠„Åø‰∏ä„Åí„Çã„Åì„Å®„Åå„ÅÇ„Çã„ÄÇ',
                '„Éë„Ç∫„É´„ÇÑËø∑Ë∑Ø„ÇíÊúÄÂæå„Åæ„Åß„ÇÑ„ÇäÂàá„Çã„Åì„Å®„ÅåÂ§ö„ÅÑ„ÄÇ',
                '„Åä„ÇÇ„Å°„ÇÉ„ÇíÂ§ß„Åç„ÅïÈ†Ü„ÇÑËâ≤Âà•„Å´‰∏¶„Åπ„Å¶ÈÅä„Å∂„Åì„Å®„Åå„ÅÇ„Çã„ÄÇ'
            ],
            'G': [
                '1‰∫∫„ÅßÈÅä„Å∂„Çà„Çä„ÄÅÂèãÈÅî„ÇÑÂÆ∂Êóè„Å®‰∏ÄÁ∑í„Å´ÈÅä„Å∂„ÅÆ„ÇíÂ•Ω„ÇÄ„ÄÇ',
                'Âàù„ÇÅ„Å¶‰ºö„ÅÜÂ≠ê„Å®„ÇÇ„Åô„Åê‰ª≤ËâØ„Åè„Å™„Çä„ÇÑ„Åô„ÅÑ„ÄÇ',
                'Ëá™ÂàÜ„Åã„ÇâÂèãÈÅî„ÇíË™ò„ÅÑ„ÄÅ„Åø„Çì„Å™„ÅßÊ•Ω„Åó„ÇÅ„ÇãÈÅä„Å≥„ÇíËÄÉ„Åà„Çã„ÄÇ'
            ]
        };

        const typeData = {
            'A': {
                name: 'Êé¢Á©∂„Éû„Çπ„Çø„Éº„Çø„Ç§„Éó',
                subtitle: 'Á†îÁ©∂ËÄÖÊ∞óË≥™',
                icon: 'üîç',
                description: 'Â•ΩÂ•áÂøÉ„Åå„Ç®„É≥„Ç∏„É≥„Å´„Å™„Çä„ÇÑ„Åô„ÅÑÁ†îÁ©∂ËÄÖÊ∞óË≥™„ÄÇÁñëÂïè„ÇíË¶ã„Å§„Åë„Çã„Å®Ê∑±Êéò„Çä„Åô„ÇãÂÇæÂêë„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇÂõ≥Èëë„ÉªÊ®°Âûã„ÉªÂÆüÈ®ì„Ç≠„ÉÉ„Éà„ÅØÊé¢Á©∂„ÇíÁ∂ö„Åë„ÇÑ„Åô„ÅÑÈÅìÂÖ∑„ÄÇÁ≠î„Åà„ÇíÊïô„Åà„Çã„Çà„Çä„Äå„Å©„ÅÜ„Å™„Çã„Å®ÊÄù„ÅÜÔºü„Äç„Å®Ëøî„Åô„Å®Êé¢Á©∂ÂøÉ„Åå„Åï„Çâ„Å´ÁáÉ„Åà„ÇÑ„Åô„ÅÑ„Åß„Åó„Çá„ÅÜ„ÄÇ'
            },
            'B': {
                name: '„Çπ„Éà„Éº„É™„Éº„ÇØ„É™„Ç®„Éº„Çø„Éº„Çø„Ç§„Éó',
                subtitle: '„Çπ„Éà„Éº„É™„Éº„ÉÜ„É©„Éº',
                icon: 'üìö',
                description: 'Á©∫ÊÉ≥„ÅÆ‰∏ñÁïå„Åß„ÅÑ„Åç„ÅÑ„Åç„Åô„Çã„Çπ„Éà„Éº„É™„Éº„ÉÜ„É©„Éº„ÄÇ„Åî„Å£„ÅìÈÅä„Å≥„ÉªÊº´Áîª„Å•„Åè„Çä„ÉªÂç≥ËààÂäá„Å™„Å©"Áâ©Ë™ûË¶ÅÁ¥†"„ÅåÂÖ•„Çã„Å®ÈõÜ‰∏≠Âäõ„ÅåÈ´ò„Åæ„Çä„ÇÑ„Åô„ÅÑ„Åß„Åô„ÄÇ„Ç≠„Éº„ÉØ„Éº„Éâ„ÅØ„ÄåÁ∂ö„Åç„ÇíËá™Áî±„Å´Êèè„Åë„Çã‰ΩôÁôΩ„Äç'
            },
            'C': {
                name: '‰ΩìÊÑü„Éí„Éº„É≠„Éº„Çø„Ç§„Éó',
                subtitle: '„Ç¢„ÇØ„Ç∑„Éß„É≥„Çπ„Çø„Éº',
                icon: '‚ö°',
                description: 'ËÄÉ„Åà„Çã„Çà„ÇäÂÖà„Å´‰Ωì„ÅåÂãï„Åç„ÇÑ„Åô„ÅÑ„Ç¢„ÇØ„Ç∑„Éß„É≥„Çπ„Çø„Éº„ÄÇË∑≥„Å∂„ÉªËµ∞„Çã„Éª„Åå„Çâ‰∏ã„Åå„Çã„Å™„Å©ÂÖ®Ë∫´ÈÅä„Å≥„ÅßËÑ≥„ÇÇÊ¥ªÊÄßÂåñ„Åó„ÇÑ„Åô„ÅÑ„Çø„Ç§„Éó„Åß„Åô„ÄÇÁí∞Â¢É„Å•„Åè„Çä„ÅÆ„Éù„Ç§„É≥„Éà„ÅØ„ÄåÂ∫É„ÅÑ„ÉªÂÆâÂÖ®„Éª„ÉÅ„É£„É¨„É≥„Ç∏„Åß„Åç„Çã„Äç'
            },
            'D': {
                name: '„Éì„Ç∏„É•„Ç¢„É´„Éè„É≥„Çø„Éº„Çø„Ç§„Éó',
                subtitle: '„Ç¢„Éº„Éà„Éá„Ç£„É¨„ÇØ„Çø„Éº',
                icon: 'üé®',
                description: 'Ëâ≤„ÉªÂΩ¢„ÉªÈÖçÁΩÆ„Å´ÊïèÊÑü„Å™„Ç¢„Éº„Éà„Éá„Ç£„É¨„ÇØ„Çø„Éº„ÄÇÁ¥∞ÈÉ®„ÇíË¶≥ÂØü„Åó„ÄÅËá™ÂàÜ„Å™„Çä„ÅÆÁæéÁöÑ„É´„Éº„É´„ÅßÁµÑ„ÅøÁ´ã„Å¶„ÇãÂäõ„ÅåÈ´ò„Åæ„Çä„ÇÑ„Åô„ÅÑÂÇæÂêë„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇÂΩπÁ´ã„Å§„ÅÆ„ÅØÂ§öÂΩ©„Å™Á¥†Êùê„Å®È£æ„Çå„Çã„Çπ„Éö„Éº„Çπ„ÄÇ'
            },
            'E': {
                name: '„É°„É≠„Éá„Ç£„É°„Éº„Ç´„Éº„Çø„Ç§„Éó',
                subtitle: '„Çµ„Ç¶„É≥„Éâ„ÇØ„É™„Ç®„Ç§„Çø„Éº',
                icon: 'üéµ',
                description: 'Èü≥„Å®„É™„Ç∫„É†„ÅßÊÑüÊÉÖ„ÇíË°®„Åó„ÇÑ„Åô„ÅÑ„Çµ„Ç¶„É≥„Éâ„ÇØ„É™„Ç®„Ç§„Çø„Éº„ÄÇÊóãÂæã„Å´‰πó„Çã„Å®Ë®òÊÜ∂Âäõ„ÇÑÈõÜ‰∏≠Âäõ„ÅåÈ´ò„Åæ„Çä„ÇÑ„Åô„ÅÑ„Åß„Åô„ÄÇÂÆ∂„Å´„ÅØÈ´ò‰æ°„Å™Ê•ΩÂô®„Çà„Çä"Èü≥„ÅåÈ≥¥„Çã„ÇÇ„ÅÆ"„Å®ÂÜçÁîüÁí∞Â¢É„ÇíÁî®ÊÑè„Åô„Çã„Å®ËâØ„ÅÑ„Åã„ÇÇ„Åó„Çå„Åæ„Åõ„Çì„ÄÇ'
            },
            'F': {
                name: '„Éä„É≥„Éê„Éº„Éë„Ç∫„É©„Éº„Çø„Ç§„Éó',
                subtitle: '„É≠„Ç∏„ÉÉ„ÇØÊ¥æ',
                icon: 'üß©',
                description: 'Êï∞„ÉªÈ†ÜÂ∫è„Éª„Éë„Çø„Éº„É≥„ÇíË¶ã„Å§„Åë„Çã„Å®„ÉØ„ÇØ„ÉØ„ÇØ„Åó„ÇÑ„Åô„ÅÑ„É≠„Ç∏„ÉÉ„ÇØÊ¥æ„ÄÇËø∑Ë∑Ø„ÇÑ„Éñ„É≠„ÉÉ„ÇØ„ÄÅ„ÉÜ„Éà„É™„ÇπÁ≥ª„Ç≤„Éº„É†„Å´Ê≤°È†≠„Åô„Çã„Åì„Å®„ÅåÂ§ö„ÅÑ„Çø„Ç§„Éó„Åß„Åô„ÄÇÊäΩË±°ÊÄùËÄÉ„Å®ÂÆü‰ΩìÈ®ì„ÇíË°å„ÅçÊù•„Åï„Åõ„Çã„Å®ÁêÜËß£„ÅåÊ∑±„Åæ„Çä„ÇÑ„Åô„ÅÑ„Åß„Åó„Çá„ÅÜ„ÄÇ'
            },
            'G': {
                name: '„ÇΩ„Éº„Ç∑„É£„É´„Ç≥„Éç„ÇØ„Çø„Éº„Çø„Ç§„Éó',
                subtitle: '„Ç≥„Éü„É•„Éã„ÉÜ„Ç£„É°„Éº„Ç´„Éº',
                icon: 'ü§ù',
                description: '‰∫∫„Å®Èñ¢„Çè„Çã„Åª„Å©„Ç®„Éç„É´„ÇÆ„Éº„ÅåÊπß„Åç„ÇÑ„Åô„ÅÑ„Ç≥„Éü„É•„Éã„ÉÜ„Ç£„É°„Éº„Ç´„Éº„ÄÇ‰ª≤Èñì„Å•„Åè„Çä„ÉªÂΩπÂâ≤ÂàÜÊãÖ„ÉªÂè∏‰ºöÈÄ≤Ë°å„ÇíËá™ÁÑ∂„Å´„Åì„Å™„ÅôÂÇæÂêë„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇÂ§ßÂàá„Å™„ÅÆ„ÅØ„ÄåÂçîÂäõ„Éü„ÉÉ„Ç∑„Éß„É≥„Äç„ÇíÁî®ÊÑè„Åô„Çã„Åì„Å®„Åß„Åô„ÄÇ'
            }
        };

        function generateCategories() {
            const container = document.getElementById('categories-container');
            container.innerHTML = '';

            Object.keys(typeData).forEach(category => {
                const categoryDiv = document.createElement('div');
                categoryDiv.className = 'category';
                
                const titleDiv = document.createElement('div');
                titleDiv.className = 'category-title';
                titleDiv.innerHTML = `
                    <div class="category-letter">${category}</div>
                `;
                categoryDiv.appendChild(titleDiv);

                // Add questions for this category
                questions[category].forEach((question, index) => {
                    const questionDiv = document.createElement('div');
                    questionDiv.className = 'question';
                    
                    const questionId = `${category}-${index}`;
                    
                    questionDiv.innerHTML = `
                        <div class="question-text">${question}</div>
                        <div class="options">
                            <div class="option" onclick="selectOption('${questionId}', 2, this)">
                                „Å®„Å¶„ÇÇÂΩì„Å¶„ÅØ„Åæ„Çã (2ÁÇπ)
                            </div>
                            <div class="option" onclick="selectOption('${questionId}', 1, this)">
                                Â∞ë„ÅóÂΩì„Å¶„ÅØ„Åæ„Çã (1ÁÇπ)
                            </div>
                            <div class="option" onclick="selectOption('${questionId}', 0, this)">
                                ÂΩì„Å¶„ÅØ„Åæ„Çâ„Å™„ÅÑ (0ÁÇπ)
                            </div>
                        </div>
                    `;
                    
                    categoryDiv.appendChild(questionDiv);
                });

                // Add score summary section
                const scoreSummaryDiv = document.createElement('div');
                scoreSummaryDiv.className = 'score-summary';
                scoreSummaryDiv.innerHTML = `
                    <div class="score-summary-left">
                        <span class="score-summary-text">${category}È†ÖÁõÆ„ÅÆÂêàË®àÁÇπÊï∞Ôºö</span>
                        <input type="number" 
                               class="manual-score-input" 
                               id="manual-score-${category}" 
                               min="0" 
                               max="6" 
                               placeholder="0"
                               onchange="validateManualInput(this, '${category}')"
                               onkeyup="validateManualInput(this, '${category}')">
                    </div>
                    <span class="max-score-text">/ 6ÁÇπ</span>
                `;
                categoryDiv.appendChild(scoreSummaryDiv);

                container.appendChild(categoryDiv);
            });
        }

        let answers = {};
        let manualScores = {};

        function selectOption(questionId, score, element) {
            // Remove selection from siblings
            const siblings = element.parentNode.children;
            for (let sibling of siblings) {
                sibling.classList.remove('selected');
            }
            
            // Add selection to clicked element
            element.classList.add('selected');
            
            // Store answer
            answers[questionId] = score;
            
            // Update category total if using auto calculation
            const category = questionId.split('-')[0];
            updateCategoryTotal(category);
        }

        function updateCategoryTotal(category) {
            // Only update if manual input is empty
            const manualInput = document.getElementById(`manual-score-${category}`);
            if (manualInput.value === '' || manualInput.value === null) {
                let categoryTotal = 0;
                const categoryQuestions = Object.keys(answers).filter(key => key.startsWith(category + '-'));
                categoryQuestions.forEach(questionId => {
                    categoryTotal += answers[questionId];
                });
                
                // Update the manual input field as a suggestion
                if (categoryQuestions.length === questions[category].length) {
                    manualInput.placeholder = categoryTotal.toString();
                }
            }
        }

        function validateManualInput(input, category) {
            const value = parseInt(input.value);
            const errorMessage = document.getElementById('error-message');
            
            if (input.value === '' || input.value === null) {
                delete manualScores[category];
                input.style.borderColor = '#0ea5e9';
                input.style.backgroundColor = 'white';
            } else if (isNaN(value) || value < 0 || value > 6) {
                input.style.borderColor = '#dc2626';
                input.style.backgroundColor = '#fef2f2';
                delete manualScores[category];
            } else {
                input.style.borderColor = '#0ea5e9';
                input.style.backgroundColor = 'white';
                manualScores[category] = value;
            }
            
            // Hide error message when user starts correcting
            errorMessage.style.display = 'none';
            
            checkCalculateButtonState();
        }

        function checkCalculateButtonState() {
            const calculateBtn = document.getElementById('calculate-btn');
            
            // Enable button if we have manual scores for all categories
            const hasAllManualScores = Object.keys(typeData).every(category => 
                manualScores.hasOwnProperty(category)
            );
            
            calculateBtn.disabled = !hasAllManualScores;
        }

        function calculateResults() {
            const scores = {};
            const errorMessage = document.getElementById('error-message');
            let hasError = false;

            // Use manual scores
            Object.keys(typeData).forEach(category => {
                if (manualScores.hasOwnProperty(category)) {
                    const value = manualScores[category];
                    if (value >= 0 && value <= 6) {
                        scores[category] = value;
                    } else {
                        hasError = true;
                    }
                } else {
                    hasError = true;
                }
            });

            if (hasError || Object.keys(scores).length !== Object.keys(typeData).length) {
                errorMessage.style.display = 'block';
                errorMessage.textContent = '„Åô„Åπ„Å¶„ÅÆÈ†ÖÁõÆ„Å´0„Äú6„ÅÆÂêàË®àÁÇπÊï∞„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ';
                return;
            }

            errorMessage.style.display = 'none';

            // Find highest score(s)
            const maxScore = Math.max(...Object.values(scores));
            const mainTypes = Object.keys(scores).filter(key => scores[key] === maxScore);
            
            displayResults(scores, mainTypes[0]); // Use first one if there are ties
        }

        function displayResults(scores, mainType) {
            const resultsDiv = document.getElementById('results');
            const mainResultDiv = document.getElementById('main-result');
            const scoresListDiv = document.getElementById('scores-list');
            
            // Display main result
            const typeInfo = typeData[mainType];
            mainResultDiv.innerHTML = `
                <div class="result-icon">${typeInfo.icon}</div>
                <div class="result-main-title">${mainType}: ${typeInfo.name}</div>
                <div class="result-subtitle">${typeInfo.subtitle}</div>
                <div class="result-description">${typeInfo.description}</div>
            `;
            
            // Display all scores
            scoresListDiv.innerHTML = '';
            
            // Sort scores in descending order
            const sortedScores = Object.entries(scores).sort(([,a], [,b]) => b - a);
            
            sortedScores.forEach(([category, score]) => {
                const scoreDiv = document.createElement('div');
                scoreDiv.className = `score-item ${category === mainType ? 'top-score' : ''}`;
                scoreDiv.innerHTML = `
                    <span class="score-name">${typeData[category].name}</span>
                    <span class="score-value">${score}ÁÇπ</span>
                `;
                scoresListDiv.appendChild(scoreDiv);
            });
            
            resultsDiv.style.display = 'block';
            resultsDiv.scrollIntoView({ behavior: 'smooth' });
        }

        function resetQuiz() {
            // Clear all manual inputs and answers
            const manualInputs = document.querySelectorAll('.manual-score-input');
            manualInputs.forEach(input => {
                input.value = '';
                input.placeholder = '0';
                input.style.borderColor = '#0ea5e9';
                input.style.backgroundColor = 'white';
            });
            
            // Clear all option selections
            const options = document.querySelectorAll('.option');
            options.forEach(option => {
                option.classList.remove('selected');
            });
            
            // Reset data
            answers = {};
            manualScores = {};
            
            // Hide results and error message
            document.getElementById('results').style.display = 'none';
            document.getElementById('error-message').style.display = 'none';
            
            // Disable calculate button
            document.getElementById('calculate-btn').disabled = true;
            
            window.scrollTo({ top: 0, behavior: 'smooth' });
        }

        // Initialize the quiz
        generateCategories();
        checkCalculateButtonState();
    </script>
</body>
</html>
